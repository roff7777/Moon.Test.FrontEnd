import { createElement, Component } from 'react';
import * as Script from 'react-load-script';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var DEFAULT_CHART_COLORS = [
    "#3366CC",
    "#DC3912",
    "#FF9900",
    "#109618",
    "#990099",
    "#3B3EAC",
    "#0099C6",
    "#DD4477",
    "#66AA00",
    "#B82E2E",
    "#316395",
    "#994499",
    "#22AA99",
    "#AAAA11",
    "#6633CC",
    "#E67300",
    "#8B0707",
    "#329262",
    "#5574A6",
    "#3B3EAC"
];

var ReactGoogleChartsLoader = (function (_super) {
    __extends(ReactGoogleChartsLoader, _super);
    function ReactGoogleChartsLoader(props) {
        var _this = _super.call(this, props) || this;
        var documentScripts = document.getElementsByTagName("script");
        _this.loadScript = true;
        for (var i = 0; i < documentScripts.length; i += 1) {
            if (documentScripts[i].src.includes("gstatic.com/charts/loader.js")) {
                _this.loadScript = false;
            }
        }
        return _this;
    }
    ReactGoogleChartsLoader.prototype.componentDidMount = function () {
        if (this.loadScript === false) {
            this.props.onLoad();
        }
    };
    ReactGoogleChartsLoader.prototype.render = function () {
        var _a = this.props, onError = _a.onError, onLoad = _a.onLoad;
        if (this.loadScript === true) {
            return (createElement(Script, { url: "https://www.gstatic.com/charts/loader.js", onError: function () {
                    onError();
                }, onLoad: onLoad }));
        }
        else {
            return null;
        }
    };
    return ReactGoogleChartsLoader;
}(Component));

var _this = undefined;
var GRAY_COLOR = "#CCCCCC";
var uniqueID = 0;
var generateUniqueID = function () {
    uniqueID += 1;
    return "reactgooglegraph-" + uniqueID;
};
var chartDefaultProps = {
    graph_id: null,
    legend_toggle: false,
    graphID: null,
    options: {
        colors: null
    },
    data: null,
    rows: null,
    columns: null,
    diffdata: null,
    chartEvents: null,
    legendToggle: false,
    chartActions: null,
    getChartWrapper: function (chartWrapper, google) { },
    className: "",
    style: {},
    formatters: null,
    spreadSheetUrl: null,
    spreadSheetQueryParameters: {
        headers: 1,
        gid: 1
    },
    rootProps: {}
};
var loadDataTableFromSpreadSheet = function (googleViz, spreadSheetUrl, urlParams) {
    if (urlParams === void 0) { urlParams = {}; }
    return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2, new Promise(function (resolve, reject) {
                    var headers = "" + (urlParams.headers ? "headers=" + urlParams.headers : "headers=0");
                    var queryString = "" + (urlParams.query ? "&tq=" + encodeURIComponent(urlParams.query) : "");
                    var gid = "" + (urlParams.gid ? "&gid=" + urlParams.gid : "");
                    var sheet = "" + (urlParams.sheet ? "&sheet=" + urlParams.sheet : "");
                    var urlQueryString = "" + headers + gid + sheet + queryString;
                    var urlToSpreadSheet = spreadSheetUrl + "/gviz/tq?" + urlQueryString;
                    var query = new googleViz.visualization.Query(urlToSpreadSheet);
                    query.send(function (response) {
                        if (response.isError()) {
                            reject("Error in query:  " + response.getMessage() + " " + response.getDetailedMessage());
                        }
                        else {
                            resolve(response.getDataTable());
                        }
                    });
                })];
        });
    });
};
var Chart = (function (_super) {
    __extends(Chart, _super);
    function Chart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            loadingStatus: "loading",
            google: null,
            hiddenColumns: []
        };
        _this.graphID = null;
        _this.chartWrapper = null;
        _this.getGraphID = function () {
            var _a = _this
                .props, graphID = _a.graphID, graph_id = _a.graph_id;
            var instanceGraphID;
            if (graphID === null && graph_id === null) {
                if (_this.graphID === null) {
                    instanceGraphID = generateUniqueID();
                }
                else {
                    instanceGraphID = _this.graphID;
                }
            }
            else if (graphID !== null && graph_id === null) {
                instanceGraphID = graphID;
            }
            else if (graph_id !== null && graphID === null) {
                instanceGraphID = graph_id;
            }
            else {
                instanceGraphID = graphID;
            }
            _this.graphID = instanceGraphID;
            return _this.graphID;
        };
        _this.draw = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, data, diffdata, columns, rows, options, legend_toggle, legendToggle, chartType, formatters, spreadSheetUrl, spreadSheetQueryParameters, dataTable, chartDiff, oldData, newData, columnCount, i, columnID, previousColumnLabel, previousColumnID, previousColumnType, chart;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.chartWrapper === null || this.state.google === null)
                            return [2];
                        _a = this.props, data = _a.data, diffdata = _a.diffdata, columns = _a.columns, rows = _a.rows, options = _a.options, legend_toggle = _a.legend_toggle, legendToggle = _a.legendToggle, chartType = _a.chartType, formatters = _a.formatters, spreadSheetUrl = _a.spreadSheetUrl, spreadSheetQueryParameters = _a.spreadSheetQueryParameters;
                        chartDiff = null;
                        if (diffdata !== null) {
                            oldData = this.state.google.visualization.arrayToDataTable(diffdata.old);
                            newData = this.state.google.visualization.arrayToDataTable(diffdata.new);
                            chartDiff = this.state.google.visualization[chartType].prototype.computeDiff(oldData, newData);
                        }
                        if (!(data !== null)) return [3, 1];
                        if (Array.isArray(data)) {
                            dataTable = this.state.google.visualization.arrayToDataTable(data);
                        }
                        else {
                            dataTable = new this.state.google.visualization.DataTable(data);
                        }
                        return [3, 5];
                    case 1:
                        if (!(rows !== null && columns !== null)) return [3, 2];
                        dataTable = this.state.google.visualization.arrayToDataTable([
                            columns
                        ].concat(rows));
                        return [3, 5];
                    case 2:
                        if (!(spreadSheetUrl !== null)) return [3, 4];
                        return [4, loadDataTableFromSpreadSheet(this.state.google, spreadSheetUrl, spreadSheetQueryParameters)];
                    case 3:
                        dataTable = (_b.sent());
                        return [3, 5];
                    case 4:
                        dataTable = this.state.google.visualization.arrayToDataTable([]);
                        _b.label = 5;
                    case 5:
                        columnCount = dataTable.getNumberOfColumns();
                        for (i = 0; i < columnCount; i += 1) {
                            columnID = this.getColumnID(dataTable, i);
                            if (this.state.hiddenColumns.includes(columnID)) {
                                previousColumnLabel = dataTable.getColumnLabel(i);
                                previousColumnID = dataTable.getColumnId(i);
                                previousColumnType = dataTable.getColumnType(i);
                                dataTable.removeColumn(i);
                                dataTable.addColumn({
                                    label: previousColumnLabel,
                                    id: previousColumnID,
                                    type: previousColumnType
                                });
                            }
                        }
                        chart = this.chartWrapper.getChart();
                        if (this.chartWrapper.getChartType() === "Timeline") {
                            chart && chart.clearChart();
                        }
                        this.chartWrapper.setOptions(options);
                        this.chartWrapper.setDataTable(dataTable);
                        this.chartWrapper.draw();
                        if (chartDiff !== null) {
                            this.chartWrapper.setDataTable(chartDiff);
                            this.chartWrapper.draw();
                        }
                        if (formatters !== null) {
                            this.applyFormatters(dataTable, formatters);
                            this.chartWrapper.setDataTable(dataTable);
                            this.chartWrapper.draw();
                        }
                        if (legendToggle === true || legend_toggle === true) {
                            this.grayOutHiddenColumns();
                        }
                        return [2];
                }
            });
        }); };
        _this.applyFormatters = function (dataTable, formatters) {
            if (_this.state.google === null)
                return;
            for (var _i = 0, formatters_1 = formatters; _i < formatters_1.length; _i++) {
                var formatter = formatters_1[_i];
                switch (formatter.type) {
                    case "ArrowFormat": {
                        var vizFormatter = new _this.state.google.visualization.ArrowFormat(formatter.options);
                        vizFormatter.format(dataTable, formatter.column);
                        break;
                    }
                    case "BarFormat": {
                        var vizFormatter = new _this.state.google.visualization.BarFormat(formatter.options);
                        vizFormatter.format(dataTable, formatter.column);
                        break;
                    }
                    case "ColorFormat": {
                        var vizFormatter = new _this.state.google.visualization.ColorFormat(formatter.options);
                        var ranges = formatter.ranges;
                        for (var _a = 0, ranges_1 = ranges; _a < ranges_1.length; _a++) {
                            var range = ranges_1[_a];
                            vizFormatter.addRange.apply(vizFormatter, range);
                        }
                        vizFormatter.format(dataTable, formatter.column);
                        break;
                    }
                    case "DateFormat": {
                        var vizFormatter = new _this.state.google.visualization.DateFormat(formatter.options);
                        vizFormatter.format(dataTable, formatter.column);
                        break;
                    }
                    case "NumberFormat": {
                        var vizFormatter = new _this.state.google.visualization.NumberFormat(formatter.options);
                        vizFormatter.format(dataTable, formatter.column);
                        break;
                    }
                    case "PatternFormat": {
                        var vizFormatter = new _this.state.google.visualization.PatternFormat(formatter.options);
                        vizFormatter.format(dataTable, formatter.column);
                        break;
                    }
                }
            }
        };
        _this.grayOutHiddenColumns = function () {
            if (_this.chartWrapper === null || _this.state.google === null)
                return;
            var dataTable = _this.chartWrapper.getDataTable();
            if (dataTable === null)
                return;
            var columnCount = dataTable.getNumberOfColumns();
            var hasAHiddenColumn = _this.state.hiddenColumns.length > 0;
            if (hasAHiddenColumn === false)
                return;
            var options = _this.props.options;
            var colors = Array.from({ length: columnCount - 1 }).map(function (dontcare, i) {
                var columnID = _this.getColumnID(dataTable, i + 1);
                if (_this.state.hiddenColumns.includes(columnID)) {
                    return GRAY_COLOR;
                }
                else if (typeof options.colors !== "undefined" &&
                    options.colors !== null) {
                    return options.colors[i];
                }
                else {
                    return DEFAULT_CHART_COLORS[i];
                }
            });
            _this.chartWrapper.setOptions(__assign({}, _this.props.options, { colors: colors }));
            _this.chartWrapper.draw();
        };
        _this.onResize = function () {
            if (_this.chartWrapper === null)
                return;
            _this.chartWrapper.draw();
        };
        _this.setChartActions = function (currentActions, previousActions) {
            if (_this.chartWrapper === null)
                return;
            var chart = _this.chartWrapper.getChart();
            for (var _i = 0, previousActions_1 = previousActions; _i < previousActions_1.length; _i++) {
                var chartAction = previousActions_1[_i];
                chart.removeAction(chartAction.id);
            }
            var _loop_1 = function (chartAction) {
                chart.setAction({
                    id: chartAction.id,
                    text: chartAction.text,
                    action: function () {
                        return chartAction.action(_this.chartWrapper);
                    }
                });
            };
            for (var _a = 0, currentActions_1 = currentActions; _a < currentActions_1.length; _a++) {
                var chartAction = currentActions_1[_a];
                _loop_1(chartAction);
            }
        };
        _this.getColumnID = function (dataTable, columnIndex) {
            return (dataTable.getColumnId(columnIndex) ||
                dataTable.getColumnLabel(columnIndex));
        };
        _this.listenToChartEvents = function () {
            if (_this.state.google === null || _this.chartWrapper === null) {
                return;
            }
            _this.state.google.visualization.events.removeAllListeners(_this.chartWrapper);
            var _a = _this
                .props, chartEvents = _a.chartEvents, legend_toggle = _a.legend_toggle, legendToggle = _a.legendToggle;
            if (chartEvents !== null) {
                var _loop_2 = function (event_1) {
                    var eventName = event_1.eventName, callback = event_1.callback;
                    _this.state.google.visualization.events.addListener(_this.chartWrapper, eventName, function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        if (_this.chartWrapper !== null && _this.state.google !== null) {
                            callback({
                                chartWrapper: _this.chartWrapper,
                                props: _this.props,
                                google: _this.state.google,
                                state: _this.state,
                                eventArgs: args
                            });
                        }
                    });
                };
                for (var _i = 0, chartEvents_1 = chartEvents; _i < chartEvents_1.length; _i++) {
                    var event_1 = chartEvents_1[_i];
                    _loop_2(event_1);
                }
            }
            if (legendToggle === true || legend_toggle === true) {
                _this.listenToLegendToggle();
            }
        };
        _this.listenToLegendToggle = function () {
            if (_this.state.google === null || _this.chartWrapper === null) {
                return;
            }
            _this.state.google.visualization.events.addListener(_this.chartWrapper, "select", function () {
                if (_this.chartWrapper === null)
                    return;
                var chart = _this.chartWrapper.getChart();
                var selection = chart.getSelection();
                var dataTable = _this.chartWrapper.getDataTable();
                if (selection.length === 0 ||
                    selection[0].row !== null ||
                    dataTable === null) {
                    return;
                }
                var columnIndex = selection[0].column;
                var columnID = _this.getColumnID(dataTable, columnIndex);
                if (_this.state.hiddenColumns.includes(columnID)) {
                    _this.setState(function (state) { return (__assign({}, state, { hiddenColumns: state.hiddenColumns.filter(function (colID) { return colID !== columnID; }).slice() })); }, function () {
                        _this.draw();
                    });
                }
                else {
                    _this.setState(function (state) { return (__assign({}, state, { hiddenColumns: state.hiddenColumns.concat([columnID]) })); }, function () {
                        _this.draw();
                    });
                }
            });
        };
        _this.handleGoogleChartsLoaderScriptLoaded = function (windowGoogleCharts) {
            var _a = _this.props, version = _a.chartVersion, packages = _a.chartPackages, language = _a.chartLanguage, mapsApiKey = _a.mapsApiKey;
            windowGoogleCharts.charts.load(version || "current", {
                packages: packages || ["corechart"],
                language: language || "en",
                mapsApiKey: mapsApiKey
            });
            windowGoogleCharts.charts.setOnLoadCallback(function () {
                _this.setState(function (state) { return (__assign({}, state, { loadingStatus: "ready", google: windowGoogleCharts })); });
            });
        };
        _this.handleGoogleChartsLoaderScriptErrored = function () {
            _this.setState(function (state) { return (__assign({}, state, { loadingStatus: "errored" })); });
        };
        return _this;
    }
    Chart.prototype.componentDidMount = function () {
        this.setState({ loadingStatus: "loading" });
        window.addEventListener("resize", this.onResize);
    };
    Chart.prototype.componentDidUpdate = function (prevProps, prevState) {
        var props = this.props;
        if (prevState.loadingStatus !== "ready" &&
            this.state.loadingStatus === "ready" &&
            this.state.google !== null) {
            var chartConfig = {
                chartType: this.props.chartType,
                options: this.props.options,
                containerId: this.getGraphID()
            };
            this.chartWrapper = new this.state.google.visualization.ChartWrapper(chartConfig);
            this.listenToChartEvents();
            this.draw();
            props.getChartWrapper(this.chartWrapper, this.state.google);
            return;
        }
        if (props.chartEvents !== prevProps.chartEvents) {
            this.listenToChartEvents();
        }
        if (props.chartActions !== null || prevProps.chartActions !== null) {
            if (props.chartActions !== prevProps.chartActions) {
                this.setChartActions(props.chartActions, prevProps.chartActions);
            }
        }
        if (props.data !== prevProps.data) {
            this.draw();
        }
        if (props.rows !== prevProps.rows || props.columns !== prevProps.columns) {
            this.draw();
        }
    };
    Chart.prototype.componentWillUnmount = function () {
        if (this.chartWrapper === null || this.state.google === null) {
            return;
        }
        window.removeEventListener("resize", this.onResize);
        this.state.google.visualization.events.removeAllListeners(this.chartWrapper);
        if (this.chartWrapper.getChartType() === "Timeline") {
            this.chartWrapper.getChart() && this.chartWrapper.getChart().clearChart();
        }
    };
    Chart.prototype.render = function () {
        var _this = this;
        var divStyle = __assign({ height: this.props.height || (this.props.options && this.props.options.height), width: this.props.width || (this.props.options && this.props.options.width) }, this.props.style);
        return (createElement("div", __assign({ id: this.getGraphID(), style: divStyle, className: this.props.className }, this.props.rootProps),
            createElement(ReactGoogleChartsLoader, { onError: this.handleGoogleChartsLoaderScriptErrored, onLoad: function () {
                    var windowWithGoogle = window;
                    if (windowWithGoogle.google) {
                        _this.handleGoogleChartsLoaderScriptLoaded(windowWithGoogle.google);
                    }
                } }),
            this.state.loadingStatus === "loading" &&
                (this.props.loader ? this.props.loader : "Rendering Chart...")));
    };
    Chart.defaultProps = chartDefaultProps;
    return Chart;
}(Component));

export default Chart;
export { Chart };
